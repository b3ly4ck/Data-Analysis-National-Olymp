import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from services.filter import filter_dataset
from services.get_group import age_grouping
from scipy.stats import mannwhitneyu, spearmanr
from services.specialty_grouping import distribute_specialties

groups = {
        "Юристы": ['Юрисконсульт', 'Юрист'],
        "Финансы, бухгалтерия": ['Экономист', 'Финансовый менеджер', 'Кредитный специалист', 'Бухгалтер'],
        "Управление персоналом": ['Менеджер по персоналу', 'Специалист по кадрам', 'Специалист по отбору персонала','Специалист по подбору персонала'],
        "Туризм, гостиницы, рестораны": ['Менеджер по туризму', 'Менеджер ресторана', 'Менеджер АХО', 'Официант, бармен, бариста','Повар, пекарь, кондитер','Уборщица, уборщик'],
        "Транспорт, логистика, перевозки": ['Упаковщик, комплектовщик', 'Руководитель отдела логистики', 'Начальник склада', 'Машинист', 'Менеджер по логистике, менеджер по ВЭД', 'Водитель', 'Диспетчер', 'Кладовщик', 'Курьер'],
        'Строительство, недвижимость': ['Сварщик', 'Слесарь, сантехник', 'Разнорабочий', 'Руководитель проектов', 'Монтажник', 'Инженер-конструктор, инженер-проектировщик', 'Инженер по охране труда и технике безопасности, инженер-эколог', 'Дизайнер, художник'],
        'Стратегия, инвестиции, консалтинг': ['Руководитель проектов', 'Аналитик'],
        'Спортивные клубы, фитнес, салоны красоты': ['Фитнес-тренер, инструктор тренажерного зала', 'Менеджер по продажам, менеджер по работе с клиентами'],
        'Сельское хозяйство': ['Сервисный инженер, инженер-механик', 'Технолог'],
        'Розничная торговля': ['Администратор магазина, администратор торгового зала', 'Мерчандайзер', 'Продавец-консультант, продавец-кассир', 'Супервайзер', 'Товаровед'],
        'Рабочий персонал': [ 'Кладовщик', 'Механик', 'Монтажник', 'Оператор производственной линии', 'Разнорабочий', 'Сварщик', 'Сервисный инженер, инженер-механик', 'Слесарь, сантехник', 'Упаковщик, комплектовщик'],
        'Производство, сервисное обслуживание': ['Инженер по охране труда и технике безопасности, инженер-эколог', 'Инженер-конструктор, инженер-проектировщик', 'Машинист', 'Механик', 'Начальник производства', 'Начальник смены, мастер участка', 'Оператор производственной линии', 'Сварщик', 'Сервисный инженер, инженер-механик', 'Слесарь, сантехник', 'Технолог'],
        'Продажи, обслуживание клиентов': [ 'Кассир-операционист', 'Координатор отдела продаж', 'Кредитный специалист', 'Менеджер по продажам, менеджер по работе с клиентами', 'Оператор call-центра, специалист контактного центра', 'Продавец-консультант, продавец-кассир', 'Руководитель отдела продаж', 'Специалист технической поддержки', 'Торговый представитель'],
        'Наука, Образование': [ 'Психолог', 'Учитель, преподаватель, педагог'],
        'Медицина, фармацевтика': ["Врач"],
        'Маркетинг, реклама, PR': ['SMM-менеджер, контент-менеджер', 'Аналитик', 'Дизайнер, художник', 'Менеджер по маркетингу, интернет-маркетолог', 'Менеджер по продажам, менеджер по работе с клиентами', 'Искусство, развлечения, массмедиа', 'Дизайнер, художник'],
        'Информационные технологии': ['Аналитик', 'Дизайнер, художник', 'Программист, разработчик', 'Руководитель проектов', 'Системный администратор', 'Тестировщик'],
        'Домашний, обслуживающий персонал': [ 'Воспитатель, няня', 'Курьер', 'Охранник', 'Уборщица, уборщик'],
        'Высший и средний менеджмент': ['Генеральный директор, исполнительный директор (CEO)', 'Начальник производства',  'Директор магазина, директор сети магазинов'],
        'Административный персонал': ['Администратор', 'Делопроизводитель, архивариус', 'Менеджер/руководитель АХО', 'Оператор ПК, оператор базы данных', 'Офис-менеджер', 'Секретарь, помощник руководителя, ассистент']
    }
specialties = groups.keys()
df = pd.read_csv('../hh_ru_dataset.csv', sep=',')
df = filter_dataset(df, salary_upper_limit=500000, only_final_invitation=False, only_initial_response=True)
df["age"] = df["year_of_birth"].apply(lambda x: 2023 - x)
df['age_category'] = df["year_of_birth"].apply(
    lambda x: f"{str((2023 - x) // 10 * 10)}-{str((2023 - x) // 10 * 10 + 10)}")
df = age_grouping(df)
for specialty in specialties:
    fig, ax = plt.subplots(figsize=(10, 10))
    ax.set_facecolor('xkcd:salmon')
    temp_df = distribute_specialties(df, specialty)
    temp_df = temp_df[temp_df["young"] == 0]
    temp_df = temp_df.sort_values('age').reset_index()
    p = mannwhitneyu(temp_df[temp_df["elderly"] == 1]['expected_salary'],
                     temp_df[temp_df["middle_aged"] == 1]['expected_salary'])[1]
    c = spearmanr(temp_df["age"], temp_df["expected_salary"])[0]
    fig = sns.barplot(y="expected_salary", x="elderly", data=temp_df, palette=sns.color_palette(["#FFF465", "#FFF465", "#FFF465", "#FFF465", "#FFF465", "#FFF465"]))
    fig = ax.get_figure()
    plt.ylabel('Зарплата, руб.')
    plt.suptitle(f'{str(round(p, 3))} {str(round(c, 3))} "{specialty}"')

    fig.savefig("charts/Зарплата_по_специализациям/" + specialty + '.png', transparent=True)